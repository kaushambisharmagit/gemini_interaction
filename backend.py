# -*- coding: utf-8 -*-
"""backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nGf62RJa9RH5ZLj1rifRHEjGW5exkQk1
"""
import fastapi
import google.generativeai as genai
import pathlib
import mimetypes
import nest_asyncio
import uvicorn
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import JSONResponse

# Configure your Gemini API key
genai.configure(api_key="AIzaSyCI1QuOx2zZebLGjKtIJjPIVIrqTzp2L5w")

# Load the Gemini multimodal model
model = genai.GenerativeModel("gemini-2.0-flash")

app = FastAPI()

from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Or specify your frontend domain for better security
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/text-image")
async def text_image(text: str = Form(...), image: UploadFile = File(...)):
    parts = [text]
    image_data = await image.read()
    mime_type, _ = mimetypes.guess_type(image.filename)
    parts.append({"mime_type": mime_type or "image/jpeg", "data": image_data})

    try:
        response = model.generate_content(parts)
        return JSONResponse(content={"response": response.text})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/text-audio")
async def text_audio(text: str = Form(...), audio: UploadFile = File(...)):
    parts = [text]
    audio_data = await audio.read()
    mime_type, _ = mimetypes.guess_type(audio.filename)
    parts.append({"mime_type": mime_type or "audio/wav", "data": audio_data})

    try:
        response = model.generate_content(parts)
        return JSONResponse(content={"response": response.text})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/audio-only")
async def audio_only(audio: UploadFile = File(...)):
    parts = []
    audio_data = await audio.read()
    mime_type, _ = mimetypes.guess_type(audio.filename)
    parts.append({"mime_type": mime_type or "audio/wav", "data": audio_data})

    try:
        response = model.generate_content(parts)
        return JSONResponse(content={"response": response.text})
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/")
def read_root():
    return {"message": "FastAPI server is running!"}

# Fix for running inside Jupyter or Colab
nest_asyncio.apply()

if __name__ == "__main__":   
    import os
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))

